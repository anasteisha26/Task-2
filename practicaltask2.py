# -*- coding: utf-8 -*-
"""PracticalTask2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xBjSIaLn7K1eMavJHBaV9k51SBdcV8Vp
"""

# Task 0.
import pandas as pd
data = pd.read_csv("/content/adult.data.csv")
data.head()

# Task 1. Посчитайте, сколько мужчин и женщин (признак sex) представлено в этом датасете.

data.value_counts(subset = "sex")

# Task 2. Каков средний возраст мужчин (признак age) по всему датасету?

y = data[['age','sex']].query('sex == "Male"')
mean = y[['age']].mean()
int(mean)

# Task 3. Какова доля граждан Соединенных Штатов (признак native-country)?
filtered_data = data[data['native-country'] == 'United-States']
total_people = len(data)  # Total number of people in the original DataFrame
us_people = len(filtered_data)  # Number of people from the United States
us_percentage = int((us_people / total_people) * 100)
print(us_percentage,"%")

# Task 4-5. Рассчитайте среднее значение и
# среднеквадратичное отклонение возраста тех,
# кто получает более 50K в год (признак salary)
# и тех, кто получает менее 50K в год

age_salary = data[["age", "salary"]]

more_than_50 = age_salary.query('salary == ">50K"')
print("The average age of people making more than 50K is:", more_than_50["age"].mean())
print()
print("The standard deviation of their age is:", more_than_50["age"].std())
print()
less_than_50 = age_salary.query('salary == "<=50K"')
print("The average age of people making less than 50K is:",less_than_50["age"].mean())
print()
print("The standard deviation of their age is:",less_than_50["age"].std())

# Task 6. Правда ли, что люди, которые получают больше 50k,
# имеют минимум высшее образование? (признак education –
# Bachelors, Prof-school, Assoc-acdm, Assoc-voc, Masters или Doctorate)

education_salary = data[["education", "salary"]]

more_than_50_2 = education_salary.query('salary == ">50K"')
more_than_50_2.value_counts(normalize=True)*100

# Everything about Bachelors
have_bachelors = len(education_salary.query('education == "Bachelors"'))
Bachelors_and_more_than_50K = len(more_than_50_2.query('education == "Bachelors"'))
print("There are",have_bachelors, "people with Bachelors,", Bachelors_and_more_than_50K,\
      "people with Bachelors earn more than 50K, which is",int(100*(Bachelors_and_more_than_50K/\
                                                                    have_bachelors)),"%")

print()

# Everything about Prof-school
have_prof_school = len(education_salary.query('education == "Prof-school"'))
Profschool_and_more_than_50K = len(more_than_50_2.query('education == "Prof-school"'))
print("There are",have_prof_school, "people with Prof-school,", Profschool_and_more_than_50K,\
      "people with Prof-school earn more than 50K, which is",int(100*(Profschool_and_more_than_50K/\
                                                                      have_prof_school)),"%")

print()

# Everything about Assoc-acdm

have_assocacdm = len(education_salary.query('education == "Assoc-acdm"'))
Assocacdm_and_more_than_50K = len(more_than_50_2.query('education == "Assoc-acdm"'))
print("There are",have_assocacdm, "people with Assoc-acdm,", Assocacdm_and_more_than_50K,\
      "people with Assoc-acdm earn more than 50K, which is",int(100*(Assocacdm_and_more_than_50K/\
                                                                     have_assocacdm)),"%")

print()

# Everything about Assoc-voc

have_assocvoc = len(education_salary.query('education == "Assoc-voc"'))
Assocvoc_and_more_than_50K = len(more_than_50_2.query('education == "Assoc-voc"'))
print("There are",have_assocvoc, "people with Assoc-voc,", Assocvoc_and_more_than_50K,\
      "people with Assoc-voc earn more than 50K, which is",int(100*(Assocvoc_and_more_than_50K/\
                                                                    have_assocvoc)),"%")
print()

# Everything about Masters

have_masters = len(education_salary.query('education == "Masters"'))
Masters_and_more_than_50K = len(more_than_50_2.query('education == "Masters"'))
print("There are",have_masters, "people with Masters,", Masters_and_more_than_50K,\
      "people with Masters earn more than 50K, which is",int(100*(Masters_and_more_than_50K/\
                                                                  have_masters)),"%")

print()

# Everything about Doctorate

have_doctorate = len(education_salary.query('education == "Doctorate"'))
Doctorate_and_more_than_50K = len(more_than_50_2.query('education == "Doctorate"'))
print("There are",have_doctorate, "people with Doctorate,", Doctorate_and_more_than_50K,\
      "people with Doctorate earn more than 50K, which is",int(100*(Doctorate_and_more_than_50K/\
                                                                    have_doctorate)),"%")

print()

education_plus_50k = len(more_than_50_2.query('education == "Doctorate" or education\
 == "Masters" or education == "Assoc-voc" or education == "Assoc-acdm" or education ==\
  "Prof-school" or education == "Bachelors"'))

highly_educated = have_bachelors + have_prof_school + have_assocacdm + have_assocvoc + have_masters + have_doctorate

print("There are", len(data), "people in the data-set.",highly_educated,"people \
(",int(100*(highly_educated/len(data))),"%) have a higher education. And only",education_plus_50k,\
      "people (",int(100*(education_plus_50k/highly_educated)),"%) with higher education earn more than 50k.")

# Нет нужны включать в задание. Тут я просто проверяла.
education_salary = data[["education", "salary"]]
education_salary.value_counts("education", normalize=True)*100

# Task 7. Выведите статистику возраста для каждой расы
# (признак race) и каждого пола. Используйте groupby и describe.
# Найдите таким образом максимальный возраст мужчин расы Asian-Pac-Islander.

data["age"].describe()

# applying groupby() function to
# group the data on team value.
gk = data.groupby('sex')

# Let's print the first entries
# in all the groups formed.
gk["age"].describe()

# applying groupby() function to
# group the data on team value.
gz = data.groupby('race')

# Let's print the first entries
# i[n all the groups formed.
gz[["race", "age"]].describe()

u.loc("min")

